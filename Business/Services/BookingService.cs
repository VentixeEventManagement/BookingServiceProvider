using Business.Models;
using Data.Entities;
using Data.Models;
using Data.Repositories;

namespace Business.Services;

public class BookingService(IBookingRepository bookingRepository) : IBookingService
{
    private readonly IBookingRepository _bookingRepository = bookingRepository;

    public async Task<RepositoryResponse> CreateBookingAsync(CreateBookingRequest request)
    {
        var bookingEntity = new BookingEntity
        {
            EventId = request.EventId,
            Date = DateTime.UtcNow,
            UserId = request.UserId,
            TicketPrice = request.TicketPrice,
            TicketCount = request.TicketCount,
            TotalAmount = request.TotalAmount,
            BookingClient = new BookingClientEntity
            {
                FirstName = request.FirstName,
                LastName = request.LastName,
                Email = request.Email,
                Phone = request.Phone,
                BookingLocation = new BookingLocationEntity
                {
                    Address = request.Address,
                    City = request.City,
                    State = request.State,
                    PostalCode = request.PostalCode
                }
            }
        };

        var response = await _bookingRepository.AddAsync(bookingEntity);
        if (response.Success)
        {
            return new RepositoryResponse
            {
                Success = true,
                Error = "Booking created successfully.",
            };
        }
        return new RepositoryResponse
        {
            Success = false,
            Error = "Failed to create booking.",
        };
    }

    public async Task<RepositoryResponse<IEnumerable<BookingEntity>>> GetAllBookingsAsync()
    {
        var response = await _bookingRepository.GetAllAsync();
        if (response.Success)
        {
            return new RepositoryResponse<IEnumerable<BookingEntity>>
            {
                Success = true,
                Response = response.Response,
            };
        }
        return new RepositoryResponse<IEnumerable<BookingEntity>>
        {
            Success = false,
            Error = "Failed to retrieve bookings.",
        };
    }

    public async Task<RepositoryResponse<BookingEntity?>> GetBookingByIdAsync(string id)
    {
        var response = await _bookingRepository.GetAsync(x => x.Id == id);
        if (response.Success)
        {
            return new RepositoryResponse<BookingEntity?>
            {
                Success = true,
                Response = response.Response,
            };
        }
        return new RepositoryResponse<BookingEntity?>
        {
            Success = false,
            Error = "Failed to retrieve booking.",
        };
    }

    public async Task<RepositoryResponse> UpdateBookingAsync(string id, UpdateBookingRequest request)
    {
        var bookingEntity = new BookingEntity
        {
            EventId = request.EventId,
            Date = DateTime.UtcNow,
            UserId = request.UserId,
            TicketPrice = request.TicketPrice,
            TicketCount = request.TicketCount,
            TotalAmount = request.TotalAmount,
            BookingClient = new BookingClientEntity
            {
                FirstName = request.FirstName,
                LastName = request.LastName,
                Email = request.Email,
                Phone = request.Phone,
                BookingLocation = new BookingLocationEntity
                {
                    Address = request.Address,
                    City = request.City,
                    State = request.State,
                    PostalCode = request.PostalCode
                }
            }
        };
        var response = await _bookingRepository.UpdateAsync(bookingEntity);
        if (response.Success)
        {
            return new RepositoryResponse
            {
                Success = true,
                Error = "Booking updated successfully.",
            };
        }
        return new RepositoryResponse
        {
            Success = false,
            Error = "Failed to update booking.",
        };
    }

    public async Task<RepositoryResponse> DeleteBookingAsync(string id)
    {
        // Generated by ChatGPT
        var existingBookingResponse = await _bookingRepository.GetAsync(x => x.Id == id);
        if (!existingBookingResponse.Success || existingBookingResponse.Response == null)
        {
            return new RepositoryResponse
            {
                Success = false,
                Error = "Booking not found."
            };
        }

        // Generated by ChatGPT
        var deleteResult = await _bookingRepository.DeleteAsync(existingBookingResponse.Response);
        return new RepositoryResponse
        {

            Success = deleteResult.Success,
            Error = deleteResult.Success ? "Booking deleted successfully." : "Failed to delete booking."
        };
    }
}